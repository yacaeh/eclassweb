stages:
  - build
  - test
  - deploy
  - production
  
image: node:latest

cache:
  paths:
    - node_modules/

build:
    stage: build
    script:
      - npm install
    artifacts:
      paths:
        - node_modules/
test:
    stage: test
    script:
      - npm install
      - npm test
    artifacts:
        paths:
        - node_modules/

      
deploy-test:
  stage: deploy
  environment:
    name: staging
  artifacts:
    paths:
      - node_modules/
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq ssh
    - apt-get install -y -qq rsync
    - apt-get install -y -qq sshpass
    - mkdir ~/.ssh
    - echo "StrictHostKeyChecking no" >> ~/.ssh/config  
    - export SSHPASS=$DGX_PASS 
  
  script:
    - sshpass -e rsync -avzOr --exclude='.git' --exclude='.gitlab-ci.yml' --exclude='node_modules/' . $DGX_USER@$DGX_HOST:$DGX_HOST_DIR
  only:
    - develop
  

deploy-production:
  stage: production
  environment:
    name: deploying
  artifacts:
    paths:
      - node_modules/
  
  before_script:
    - apt-get update -qq
    - apt-get install -y -qq ssh
    - apt-get install -y -qq rsync
    - apt-get install -y -qq sshpass
    - 'which ssh-agent || ( apk --update add openssh-client )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 --decode)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H '$REMOTE_HOST' >> ~/.ssh/known_hosts
    - ssh-keyscan $REMOTE_HOST | sort -u - ~/.ssh/known_hosts -o ~/.ssh/known_hosts
    - '[[ -f /.dockerinit ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - echo "rsa passed!"
  script:
    - rsync -avzO --exclude='.git' --exclude='.gitlab-ci.yml' --exclude='fake-keys' . $REMOTE_USER@$REMOTE_HOST:$REMOTE_HOST_DIR
  only:
    - master